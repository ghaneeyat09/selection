{"version":3,"sources":["Singleselect.js","Multipleselect.js","App.js","reportWebVitals.js","index.js"],"names":["Singleselect","useState","selectedOption","setSelectedOption","query","setQuery","cacheOptions","defaultOptions","isSearchable","value","getOptionLabel","e","name","getOptionValue","id","loadOptions","fetch","then","res","json","data","filter","result","JSON","stringify","toLowerCase","includes","onChange","onInputChange","style","fontSize","fontWeight","Multiselect","SetSelectedOption","isMulti","map","sOption","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA4CeA,EAzCM,WAEjB,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAgBA,OACI,gCACI,cAAC,IAAD,CACIC,cAAY,EACZC,gBAAc,EACdC,cAAY,EACZC,MAAOP,EACPQ,eAAgB,SAAAC,GAAC,OAAIA,EAAEC,MACvBC,eAAgB,SAAAF,GAAC,OAAIA,EAAEG,IACvBC,YAjBQ,WAChB,OAAOC,MAAM,8CACNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAM,OAAIC,KAAKC,UAAUF,EAAOV,KAAKa,eAAeC,SAAStB,UAerFuB,SAvBS,SAAClB,GACjBN,EAAkBM,IAuBXmB,cAAe,SAAAnB,GAAK,OAAIJ,EAASI,MAErC,sBAAKoB,MAAO,CAACC,SAAU,QAAvB,0BAA8C5B,GAAkB,iCAASA,EAAeU,OAAxF,gBAAqHV,GAAkB,wBAAQ2B,MAAO,CAACE,WAAY,QAA5B,SAAsC7B,EAAeY,YCYzLkB,EA5CK,WAEhB,MAA4C/B,mBAAS,MAArD,mBAAOC,EAAP,KAAuB+B,EAAvB,KACA,EAA0BhC,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAcA,OACI,gCACI,cAAC,IAAD,CACIC,cAAY,EACZC,gBAAc,EACd2B,SAAO,EACPzB,MAAOP,EACPQ,eAAgB,SAAAC,GAAC,OAAIA,EAAEC,MACvBC,eAAgB,SAAAF,GAAC,OAAIA,EAAEG,IACvBC,YAhBQ,WAChB,OAAOC,MAAM,8CACNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAM,OAAIC,KAAKC,UAAUF,EAAOV,KAAKa,eAAeC,SAAStB,UAcrFuB,SArBS,SAAClB,GACjBwB,EAAkBxB,IAqBXmB,cAAe,SAAAnB,GAAK,OAAIJ,EAASI,MAErC,8BACKP,GAAkBA,EAAeiC,KAAK,SAAAC,GACnC,OACA,qBAAKP,MAAO,CAACE,WAAY,OAAQD,SAAU,QAA3C,SAAqDM,EAAQxB,gBCzBlEyB,EARH,WACR,OACE,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCKKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2e012b45.chunk.js","sourcesContent":["import AsyncSelect from \"react-select/async\";\r\nimport { useState } from \"react\";\r\n\r\nconst Singleselect = () => {\r\n    //usestate\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    //handleSelection\r\n    const handleChange = (value) => {\r\n         setSelectedOption(value)\r\n    }\r\n    \r\n    //load options using api call\r\n    const loadOptions = () => {\r\n        return fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n              .then(res => res.json())\r\n              .then(data => data.filter(result => JSON.stringify(result.name.toLowerCase()).includes(query))\r\n               )\r\n              \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AsyncSelect\r\n                cacheOptions \r\n                defaultOptions \r\n                isSearchable\r\n                value={selectedOption}\r\n                getOptionLabel={e => e.name}\r\n                getOptionValue={e => e.id}\r\n                loadOptions={loadOptions}\r\n                onChange={handleChange}\r\n                onInputChange={value => setQuery(value)}\r\n            />\r\n            <pre style={{fontSize: \"17px\"}}>you selected {selectedOption && <strong>{selectedOption.name}</strong>} whose id is {selectedOption && <strong style={{fontWeight: \"1000\"}}>{selectedOption.id}</strong>}</pre>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Singleselect;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import Select from \"react-select\";\r\nimport { useState} from \"react\";\r\n\r\nconst Singleselect = () => {\r\n    //const database = \"https://jsonplaceholder.typicode.com/users\"\r\n    //const [data, setData] = useState([]); \r\n    //const [input, setInput] = useState(\"\");\r\n    const [option, setOption] = useState([]);\r\n    \r\n    const fetchData = () => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(res => {\r\n            if(res.ok){\r\n                return res.json();\r\n            }\r\n        })\r\n        .then((response) => {\r\n           setOption(response)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    \r\n    fetchData();\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n            <Select options={\r\n                option.map(user=> {\r\n                   return {\r\n                       value: user.name,\r\n                       label: user.name\r\n                   }\r\n                })\r\n            }\r\n            />\r\n        }\r\n          <p>{ `You have selected ${} whose id is `}</p>\r\n\r\n\r\n        </div>\r\n    )\r\n}*/\r\n","import AsyncSelect from \"react-select/async\";\r\nimport { useState } from \"react\";\r\n\r\nconst Multiselect = () => {\r\n    //usestate\r\n    const [selectedOption, SetSelectedOption] = useState(null)\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    //handleSelection\r\n    const handleChange = (value) => {\r\n         SetSelectedOption(value)\r\n    }\r\n    //load options using api call\r\n    const loadOptions = () => {\r\n        return fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n              .then(res => res.json())\r\n              .then(data => data.filter(result => JSON.stringify(result.name.toLowerCase()).includes(query))\r\n            )\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AsyncSelect\r\n                cacheOptions \r\n                defaultOptions \r\n                isMulti\r\n                value={selectedOption}\r\n                getOptionLabel={e => e.name}\r\n                getOptionValue={e => e.id}\r\n                loadOptions={loadOptions}\r\n                onChange={handleChange}\r\n                onInputChange={value => setQuery(value)}\r\n            />\r\n            <div>\r\n                {selectedOption && selectedOption.map( sOption => {\r\n                    return (\r\n                    <pre style={{fontWeight: \"1000\", fontSize: \"18px\"}}>{sOption.name}</pre>\r\n                    )\r\n                }\r\n                )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Multiselect","import Singleselect from \"./Singleselect\";\nimport Multiselect from './Multipleselect';\n\nconst App = () => {\n    return(\n      <div>\n          <Singleselect />\n          <Multiselect />\n      </div>\n    )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}